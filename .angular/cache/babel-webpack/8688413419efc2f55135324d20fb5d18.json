{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\marti\\\\WebstormProjects\\\\ScrumOrganisationSuccessWebApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { environment } from \"../../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n  }\n\n  getAll() {\n    return this.http.get(`${environment.apiUrl}/users`);\n  }\n\n  getByEmail(email) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.http.get(`${environment.apiUrl}/users/byEmail/${email}`).toPromise();\n    })();\n  }\n\n  getById(id) {\n    return this.http.get(`${environment.apiUrl}/users/byId/${id}`);\n  }\n\n  addUser(user) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      return _this2.http.post(`${environment.apiUrl}/users`, JSON.stringify(user), httpOptions).toPromise();\n    })();\n  }\n\n}\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/marti/WebstormProjects/ScrumOrganisationSuccessWebApp/src/app/services/users/user.service.ts"],"names":["HttpHeaders","environment","i0","i1","UserService","constructor","http","getAll","get","apiUrl","getByEmail","email","toPromise","getById","id","addUser","user","httpOptions","headers","post","JSON","stringify","ɵfac","UserService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,SAASC,WAAT,QAA4B,mCAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKD,IAAL,CAAUE,GAAV,CAAe,GAAEP,WAAW,CAACQ,MAAO,QAApC,CAAP;AACH;;AACKC,EAAAA,UAAU,CAACC,KAAD,EAAQ;AAAA;;AAAA;AACpB,aAAO,KAAI,CAACL,IAAL,CAAUE,GAAV,CAAe,GAAEP,WAAW,CAACQ,MAAO,kBAAiBE,KAAM,EAA3D,EAA8DC,SAA9D,EAAP;AADoB;AAEvB;;AACDC,EAAAA,OAAO,CAACC,EAAD,EAAK;AACR,WAAO,KAAKR,IAAL,CAAUE,GAAV,CAAe,GAAEP,WAAW,CAACQ,MAAO,eAAcK,EAAG,EAArD,CAAP;AACH;;AACKC,EAAAA,OAAO,CAACC,IAAD,EAAO;AAAA;;AAAA;AAChB,YAAMC,WAAW,GAAG;AAChBC,QAAAA,OAAO,EAAE,IAAIlB,WAAJ,CAAgB;AAAE,0BAAgB;AAAlB,SAAhB;AADO,OAApB;AAGA,aAAO,MAAI,CAACM,IAAL,CAAUa,IAAV,CAAgB,GAAElB,WAAW,CAACQ,MAAO,QAArC,EAA8CW,IAAI,CAACC,SAAL,CAAeL,IAAf,CAA9C,EAAoEC,WAApE,EAAiFL,SAAjF,EAAP;AAJgB;AAKnB;;AAlBoB;;AAoBzBR,WAAW,CAACkB,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAIpB,WAAV,EAAuBF,EAAE,CAACuB,QAAH,CAAYtB,EAAE,CAACuB,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACAtB,WAAW,CAACuB,KAAZ,GAAoB,aAAczB,EAAE,CAAC0B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEzB,WAAT;AAAsB0B,EAAAA,OAAO,EAAE1B,WAAW,CAACkB,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { HttpHeaders } from \"@angular/common/http\";\r\nimport { environment } from \"../../../environments/environment\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class UserService {\r\n    constructor(http) {\r\n        this.http = http;\r\n    }\r\n    getAll() {\r\n        return this.http.get(`${environment.apiUrl}/users`);\r\n    }\r\n    async getByEmail(email) {\r\n        return this.http.get(`${environment.apiUrl}/users/byEmail/${email}`).toPromise();\r\n    }\r\n    getById(id) {\r\n        return this.http.get(`${environment.apiUrl}/users/byId/${id}`);\r\n    }\r\n    async addUser(user) {\r\n        const httpOptions = {\r\n            headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n        };\r\n        return this.http.post(`${environment.apiUrl}/users`, JSON.stringify(user), httpOptions).toPromise();\r\n    }\r\n}\r\nUserService.ɵfac = function UserService_Factory(t) { return new (t || UserService)(i0.ɵɵinject(i1.HttpClient)); };\r\nUserService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UserService, factory: UserService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}